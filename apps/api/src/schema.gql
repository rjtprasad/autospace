# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  name: String
  image: String
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LoginOutput {
  token: String!
}

type Admin {
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  whoami: User!
  users(distinct: [UserScalarFieldEnum!], where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int): [User!]!
  user(where: UserWhereUniqueInput!): User!
  admins(distinct: [AdminScalarFieldEnum!], where: AdminWhereInput, orderBy: [AdminOrderByWithRelationInput!], cursor: AdminWhereUniqueInput, take: Int, skip: Int): [Admin!]!
  admin(where: AdminWhereUniqueInput!): Admin!
}

enum UserScalarFieldEnum {
  uid
  createdAt
  updatedAt
  name
  image
}

input UserWhereInput {
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input StringFilter {
  mode: QueryMode
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
}

enum QueryMode {
  default
  insensitive
}

input DateTimeFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

input UserOrderByWithRelationInput {
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
}

enum SortOrder {
  asc
  desc
}

input UserWhereUniqueInput {
  uid: String!
}

enum AdminScalarFieldEnum {
  uid
  createdAt
  updatedAt
}

input AdminWhereInput {
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  User: UserRelationFilter
  Verifications: VerificationListRelationFilter
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input VerificationListRelationFilter {
  every: VerificationWhereInput
  some: VerificationWhereInput
  none: VerificationWhereInput
}

input VerificationWhereInput {
  AND: [VerificationWhereInput!]
  OR: [VerificationWhereInput!]
  NOT: [VerificationWhereInput!]
}

input AdminOrderByWithRelationInput {
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  User: UserOrderByWithRelationInput
  Verifications: VerificationOrderByRelationAggregateInput
}

input VerificationOrderByRelationAggregateInput {
  _count: SortOrder
}

input AdminWhereUniqueInput {
  uid: String!
}

type Mutation {
  registerWithCredentials(registerWithCredentialsInput: RegisterWithCredentialsInput!): User!
  registerWithProvider(registerWithProviderInput: RegisterWithProviderInput!): User!
  login(loginInput: LoginInput!): LoginOutput!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(where: UserWhereUniqueInput!): User!
  createAdmin(createAdminInput: CreateAdminInput!): Admin!
  updateAdmin(updateAdminInput: UpdateAdminInput!): Admin!
  removeAdmin(where: AdminWhereUniqueInput!): Admin!
}

input RegisterWithCredentialsInput {
  name: String!
  email: String!
  password: String!
  image: String
}

input RegisterWithProviderInput {
  name: String
  image: String
  uid: String!
  type: AuthProviderType!
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS
}

input LoginInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  uid: String!
}

input CreateAdminInput {
  uid: String!
}

input UpdateAdminInput {
  uid: String!
}